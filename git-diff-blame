#!/usr/bin/perl -w
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the “Software”), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do
# so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

sub parse_hunk_header {
        my ($line) = @_;
        my ($o_ofs, $o_cnt, $n_ofs, $n_cnt) =
            $line =~ /^@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/;
        $o_cnt = 1 unless defined $o_cnt;
        $n_cnt = 1 unless defined $n_cnt;
        return ($o_ofs, $o_cnt, $n_ofs, $n_cnt);
}

sub get_blame_prefix {
        my ($line) = @_;
        $line =~ /^([0-9a-f]+\s+(\S+\s+)?\([^\)]+\))/ or die "bad blame output: $line";
        return $1;
}

my ($oldrev, $newrev, @paths) = @ARGV;
open($diff, '-|', 'git', '--no-pager', 'diff', $oldrev, $newrev, @paths) or die;

my ($pre, $post);
my $filename;
while (<$diff>) {
        if (m{^diff --git ./(.*) ./\1$}) {
		close $pre if defined $pre;
		close $post if defined $post;
		print;
                $prefilename = "./" . $1;
                $postfilename = "./" . $1;
		$delete = $create = 0;
        } elsif (m{^new file}) {
		$create = 1;
		$prefilename = '/dev/null';
        } elsif (m{^deleted file}) {
		$delete = 1;
		$postfilename = '/dev/null';
        } elsif (m{^--- $prefilename$}) {
                # ignore
		print;
        } elsif (m{^\+\+\+ $postfilename$}) {
                # ignore
		print;
        } elsif (m{^@@ }) {
                my ($o_ofs, $o_cnt, $n_ofs, $n_cnt)
                        = parse_hunk_header($_);
                my $o_end = $o_ofs + $o_cnt - 1;
                my $n_end = $n_ofs + $n_cnt - 1;
		if (!$create) {
			open($pre, '-|', 'git', 'blame', '-M', "-L$o_ofs,$o_end",
                             "-l",
			     $oldrev, '--', $prefilename) or die;
		}
		if (!$delete) {
			open($post, '-|', 'git', 'blame', '-M', "-L$n_ofs,$n_end",
                             "-l",
			     $newrev, '--', $postfilename) or die;
		}
        } elsif (m{^ }) {
                print get_blame_prefix(scalar <$pre>), "\t", $_;
                scalar <$post>; # discard
        } elsif (m{^\-}) {
                print get_blame_prefix(scalar <$pre>), "\t", $_;
        } elsif (m{^\+}) {
                print get_blame_prefix(scalar <$post>), "\t", $_;
        } 
}
